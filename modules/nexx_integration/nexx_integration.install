<?php

/**
 * @file
 * Install, uninstall and update hooks for nexx integration module.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_schema().
 */
function nexx_integration_schema() {
  $schema['nexx_taxonomy_term_data'] = array(
    'description' => 'Stores taxonomy data for exchange with Omnia video cms per taxonomy term.',
    'fields' => array(
      'tid' => array(
        'description' => 'Taxonomy term id: {taxonomy_term_data}.tid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nexx_item_id' => array(
        'description' => 'Nexx item ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('tid'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function nexx_integration_install() {
  $source = drupal_get_path('module', 'nexx_integration') . '/images/icons';
  $destination = \Drupal::config('media_entity.settings')->get('icon_base');
  media_entity_copy_icons($source, $destination);
}

/**
 * Add nexx_taxonomy_term_data database schema.
 */
function nexx_integration_update_8001() {
  $spec = array(
    'description' => 'Stores taxonomy data for exchange with Omnia video cms per taxonomy term.',
    'fields' => array(
      'tid' => array(
        'description' => 'Taxonomy term id: {taxonomy_term_data}.tid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The ID of the terms target entity: {taxonomy_term_data}.vid.',
        'type' => 'varchar_ascii',
        'not null' => TRUE,
        'length' => 32,
      ),
      'nexx_item_id' => array(
        'description' => 'Nexx item ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
  );
  $schema = Database::getConnection()->schema();
  $schema->createTable('nexx_taxonomy_term_data', $spec);
}

/**
 * Removed faulty update.
 */
function nexx_integration_update_8002() {
}

/**
 * Add primary key, remove vid.
 */
function nexx_integration_update_8003() {
  $spec = array('tid');
  $schema = Database::getConnection()->schema();

  // A primary key.
  $schema->addPrimaryKey('nexx_taxonomy_term_data', $spec);

  // Remove unused vid column.
  $schema->dropField('nexx_taxonomy_term_data', 'vid');
}

/**
 * Add new tags_ids field to nexx field type.
 */
function nexx_integration_update_8004() {
  $messages = [];
  $database = \Drupal::database();
  $database_schema = $database->schema();
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  $schema = \Drupal::keyValue('entity.storage_schema.sql')->getAll();

  foreach ($schema as $item_name => $item) {
    list($entity_type_id, , $field_name) = explode('.', $item_name);

    // Basic sanity check.
    if (!isset($entity_types[$entity_type_id])) {
      continue;
    }
    foreach ($item as $table_name => $table_schema) {
      foreach ($table_schema as $schema_key => $schema_data) {
        if ($schema_key === 'fields') {
          // Test if field schema contains a known nexx property.
          // TODO: investigate how to properly determine,
          // if we are dealing with a nexx field.
          $existing_field_property = $field_name . '_encodedSSC';
          $new_field_property = $field_name . '_tags_ids';
          if (isset($schema_data[$existing_field_property])) {
            // This is the actual update, adding the new field.
            if ($database_schema->tableExists($table_name) && !$database_schema->fieldExists($table_name, $new_field_property)) {
              $messages[] = t('Updating nexx field @field in table @table', array(
                '@field' => $field_name,
                '@table' => $table_name,
              ));
              $database_schema->addField($table_name, $new_field_property, [
                'type' => 'varchar',
                'length' => 256,
              ]);
            }
          }
        }
      }
    }
  }

  $message = '';
  if (!empty($messages)) {
    $message .= implode('</br>', $messages);
  }
  return $message;
}


/**
 * Add new runtime and copyright fields to nexx field type.
 */
function nexx_integration_update_8005() {
  $messages = [];
  $database = \Drupal::database();
  $database_schema = $database->schema();
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  $schema = \Drupal::keyValue('entity.storage_schema.sql')->getAll();

  foreach ($schema as $item_name => $item) {
    list($entity_type_id, , $field_name) = explode('.', $item_name);

    // Basic sanity check.
    if (!isset($entity_types[$entity_type_id])) {
      continue;
    }
    foreach ($item as $table_name => $table_schema) {
      foreach ($table_schema as $schema_key => $schema_data) {
        if ($schema_key === 'fields') {
          // Test if field schema contains a known nexx property.
          // TODO: investigate how to properly determine,
          // if we are dealing with a nexx field.
          $existing_field_property = $field_name . '_encodedSSC';
          $new_field_properties = array($field_name . '_runtime', $field_name . '_copyright');

          if (isset($schema_data[$existing_field_property])) {
            foreach ($new_field_properties as $new_field_property) {
              // This is the actual update, adding the new field.
              if ($database_schema->tableExists($table_name) && !$database_schema->fieldExists($table_name, $new_field_property)) {
                $messages[] = t('Updating nexx field @field in table @table', array(
                  '@field' => $field_name,
                  '@table' => $table_name,
                ));
                $database_schema->addField($table_name, $new_field_property, [
                  'type' => 'varchar',
                  'length' => 256,
                ]);
              }
            }
          }
        }
      }
    }
  }

  $message = '';
  if (!empty($messages)) {
    $message .= implode('</br>', $messages);
  }
  return $message;
}


/**
 * Add new hash field to nexx field type.
 */
function nexx_integration_update_8006() {
  $messages = [];
  $database = \Drupal::database();
  $database_schema = $database->schema();
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  $schema = \Drupal::keyValue('entity.storage_schema.sql')->getAll();

  foreach ($schema as $item_name => $item) {
    list($entity_type_id, , $field_name) = explode('.', $item_name);

    // Basic sanity check.
    if (!isset($entity_types[$entity_type_id])) {
      continue;
    }
    foreach ($item as $table_name => $table_schema) {
      foreach ($table_schema as $schema_key => $schema_data) {
        if ($schema_key === 'fields') {
          // Test if field schema contains a known nexx property.
          // TODO: investigate how to properly determine,
          // if we are dealing with a nexx field.
          $existing_field_property = $field_name . '_encodedSSC';
          $new_field_properties = array($field_name . '_hash');

          if (isset($schema_data[$existing_field_property])) {
            foreach ($new_field_properties as $new_field_property) {
              // This is the actual update, adding the new field.
              if ($database_schema->tableExists($table_name) && !$database_schema->fieldExists($table_name, $new_field_property)) {
                $messages[] = t('Updating nexx field @field in table @table', array(
                  '@field' => $field_name,
                  '@table' => $table_name,
                ));
                $database_schema->addField($table_name, $new_field_property, [
                  'type' => 'varchar',
                  'length' => 256,
                ]);
              }
            }
          }
        }
      }
    }
  }

  $message = '';
  if (!empty($messages)) {
    $message .= implode('</br>', $messages);
  }
  return $message;
}

/**
 * Remove description fields.
 */
function nexx_integration_update_8007() {
  $messages = [];
  $database = \Drupal::database();
  $database_schema = $database->schema();
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  $schema_key_value = \Drupal::keyValue('entity.storage_schema.sql');
  $schema = $schema_key_value->getAll();

  foreach ($schema as $item_name => $item) {
    list($entity_type_id, , $field_name) = explode('.', $item_name);

    // Basic sanity check.
    if (!isset($entity_types[$entity_type_id])) {
      continue;
    }
    foreach ($item as $table_name => $table_schema) {
      foreach ($table_schema as $schema_key => $schema_data) {
        if ($schema_key === 'fields') {
          $field_schema_key = 'media.field_schema_data.' . $field_name;
          $field_schema = $schema_key_value->get($field_schema_key, array());

          // Test if field schema contains a known nexx property.
          // TODO: investigate how to properly determine,
          // if we are dealing with a nexx field.
          $existing_field_property = $field_name . '_encodedSSC';
          $update_field_properties = array($field_name . '_description', $field_name . '_altdescription');

          if (isset($schema_data[$existing_field_property])) {
            foreach ($update_field_properties as $update_field_property) {

              // This is the actual update, deleting the fields.
              if ($database_schema->tableExists($table_name) && $database_schema->fieldExists($table_name, $update_field_property)) {
                $messages[] = t('Updating nexx field @field in table @table', array(
                  '@field' => $field_name,
                  '@table' => $table_name,
                ));
                $database_schema->dropField($table_name, $update_field_property);
                // also update schema key value
                foreach ($field_schema as $table => $definition) {
                  unset($field_schema[$table]['fields'][$update_field_property]);
                }
              }
            }
            $schema_key_value->set($field_schema_key, $field_schema);
          }
        }
      }
    }
  }

  $message = '';
  if (!empty($messages)) {
    $message .= implode('</br>', $messages);
  }
  return $message;
}
