<?php

/**
 * @file
 * Contains update hooks.
 */

use Drupal\Core\Config\InstallStorage;

/**
 * Update paragraphs type Riddle and rename of labels for it.
 */
function paragraphs_riddle_marketplace_update_8001() {
  $entityManager = \Drupal::service('entity.manager');

  // IDs of entities that require update.
  $fieldConfigId = 'paragraph.paragraphs_riddle_marketplace.field_link';
  $paragraphTypeId = 'paragraphs_riddle_marketplace';

  // Read config from file.
  $fieldFormDisplayConfigYmlFilename = 'core.entity_form_display.paragraph.paragraphs_riddle_marketplace.default';
  $paragraphsTypeConfigYmlFilename = 'paragraphs.paragraphs_type.paragraphs_riddle_marketplace';
  $fieldConfigYmlFilename = 'field.field.paragraph.paragraphs_riddle_marketplace.field_link';

  // Field form display custom values.
  $contentConfigName = 'content';
  $fieldName = 'field_link';

  /*
   * load configurations from file
   */
  $fieldFormDisplayConfigStorage = new InstallStorage();
  $fieldFormDisplayConfigData = $fieldFormDisplayConfigStorage->read($fieldFormDisplayConfigYmlFilename);
  if (FALSE === $fieldFormDisplayConfigData) {
    \Drupal::logger('php')
      ->error('Not existing config file: ' . $fieldFormDisplayConfigYmlFilename . '.yml');

    return;
  }

  $fieldFromDisplayContentConfig = $fieldFormDisplayConfigData[$contentConfigName];
  if (empty($fieldFromDisplayContentConfig) || !is_array($fieldFromDisplayContentConfig)
    || empty($fieldFromDisplayContentConfig[$fieldName]) || !is_array($fieldFromDisplayContentConfig[$fieldName])
  ) {
    \Drupal::logger('php')
      ->error('Not existing configuration: ' . $contentConfigName);

    return;
  }

  $fieldConfigStorage = new InstallStorage();
  $fieldConfigData = $fieldConfigStorage->read($fieldConfigYmlFilename);
  if (FALSE === $fieldConfigData) {
    \Drupal::logger('php')
      ->error('Not existing config file: ' . $fieldConfigYmlFilename . '.yml');

    return;
  }

  $paragraphsTypeConfigStorage = new InstallStorage();
  $paragraphsTypeConfigData = $paragraphsTypeConfigStorage->read($paragraphsTypeConfigYmlFilename);
  if (FALSE === $paragraphsTypeConfigData) {
    \Drupal::logger('php')
      ->error('Not existing config file: ' . $paragraphsTypeConfigYmlFilename . '.yml');

    return;
  }

  /*
   * update field configuration
   * - label and form display settings
   */
  if ($storedFields = $entityManager
    ->getStorage('field_config')
    ->loadByProperties(array('id' => $fieldConfigId))
  ) {
    foreach ($storedFields as $storedField) {
      $storedField->set('label', $fieldConfigData['label'])
        ->save();

      // Properties used to find entity.
      $searchProperties = array(
        'targetEntityType' => $storedField->getTargetEntityTypeId(),
        'bundle' => $storedField->getTargetBundle(),
      );

      if ($formDisplays = $entityManager
        ->getStorage('entity_form_display')
        ->loadByProperties($searchProperties)
      ) {
        foreach ($formDisplays as $formDisplay) {
          if ($component = $formDisplay->getComponent($fieldName)) {
            $formDisplay->setComponent($fieldName, $fieldFromDisplayContentConfig[$fieldName] + $component)
              ->save();
          }
        }
      }
      else {
        \Drupal::logger('php')
          ->warning('Configuration for entity_form_display not found: ' . $fieldConfigId);
      }
    }
  }
  else {
    \Drupal::logger('php')
      ->warning('Configuration for field_config not found: ' . $fieldConfigId);
  }

  /*
   * update paragraphs riddle market type label
   */
  if ($paragraphRiddleTypes = $entityManager
    ->getStorage('paragraphs_type')
    ->loadByProperties(array('id' => $paragraphTypeId))
  ) {

    // Update Paragraph Type Label.
    foreach ($paragraphRiddleTypes as $paragraphRiddleType) {
      $paragraphRiddleType->set('label', $paragraphsTypeConfigData['label'])
        ->save();
    }
  }
  else {
    \Drupal::logger('php')
      ->warning('Configuration for paragraphs_type not found: ' . $paragraphTypeId);
  }

}
